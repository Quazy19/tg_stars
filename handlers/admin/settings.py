import logging
from aiogram import F, Router, types, Bot
from aiogram.fsm.context import FSMContext

from services.repository import Repository
from states.admin import AdminSettingsStates
from keyboards.admin_kb import (
    get_admin_panel_kb, get_admin_settings_kb, get_settings_texts_kb, get_settings_support_kb,
    get_settings_channel_kb, MaintenanceCallback
)

router = Router()

@router.callback_query(MaintenanceCallback.filter(F.action == "toggle"))
async def toggle_maintenance_mode(call: types.CallbackQuery, repo: Repository):
    is_maintenance_old = await repo.get_setting('maintenance_mode') == '1'
    new_status = not is_maintenance_old
    
    await repo.update_setting('maintenance_mode', '1' if new_status else '0')
    
    status_text = "–í–ö–õ–Æ–ß–ï–ù" if new_status else "–í–´–ö–õ–Æ–ß–ï–ù"
    await call.answer(f"–†–µ–∂–∏–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ—Ä—ã–≤–∞ {status_text}", show_alert=True)
    
    is_maintenance_new = await repo.get_setting('maintenance_mode') == '1'
    await call.message.edit_reply_markup(reply_markup=get_admin_panel_kb(is_maintenance_new))

@router.callback_query(F.data == "admin_settings")
async def admin_settings_menu(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("<b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞</b>", reply_markup=get_admin_settings_kb())

@router.callback_query(F.data == "settings_texts_menu")
async def settings_texts_menu(call: types.CallbackQuery):
    await call.message.edit_text("<b>üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏</b>", reply_markup=get_settings_texts_kb())

@router.callback_query(F.data.startswith("settings_edit_text_"))
async def settings_edit_text_start(call: types.CallbackQuery, state: FSMContext):
    text_key = call.data.replace("settings_edit_text_", "")
    state_map = {
        "start_text": AdminSettingsStates.waiting_for_start_text,
        "purchase_success_text": AdminSettingsStates.waiting_for_purchase_text
    }
    
    placeholders_info = (
        "\n\n<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:</b>\n"
        "<code>{ID}</code> - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "<code>{@username}</code> - @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "<code>{full_name}</code> - –ü–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )
    
    await state.update_data(text_key=text_key)
    await state.set_state(state_map[text_key])
    await call.message.edit_text(
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è '{text_key}'.\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è HTML-—Ä–∞–∑–º–µ—Ç–∫–∞.{placeholders_info}",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_texts_menu")]])
    )

@router.message(AdminSettingsStates.waiting_for_start_text)
@router.message(AdminSettingsStates.waiting_for_purchase_text)
async def settings_process_new_text(message: types.Message, state: FSMContext, repo: Repository):
    data = await state.get_data()
    text_key = data.get("text_key")
    await repo.update_setting(text_key, message.html_text)
    await state.clear()
    await message.answer(f"‚úÖ –¢–µ–∫—Å—Ç –¥–ª—è '{text_key}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
    await message.answer("<b>üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞–º–∏</b>", reply_markup=get_settings_texts_kb())
    
@router.callback_query(F.data == "settings_support_menu")
async def settings_support_menu(call: types.CallbackQuery, repo: Repository):
    contact = await repo.get_setting('support_contact') or "–ù–µ –∑–∞–¥–∞–Ω"
    await call.message.edit_text(f"<b>üÜò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>\n\n–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: @{contact}", reply_markup=get_settings_support_kb())

@router.callback_query(F.data == "settings_edit_support")
async def settings_edit_support_start(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminSettingsStates.waiting_for_support_contact)
    await call.message.edit_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ username).",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_support_menu")]])
    )
    
@router.message(AdminSettingsStates.waiting_for_support_contact)
async def settings_process_new_support(message: types.Message, state: FSMContext, repo: Repository):
    contact = message.text.strip().lstrip('@')
    await repo.update_setting('support_contact', contact)
    await state.clear()
    await message.answer(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ @{contact}.")
    await message.answer(f"<b>üÜò –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π</b>\n\n–¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç: @{contact}", reply_markup=get_settings_support_kb())

@router.callback_query(F.data == "settings_channel_menu")
async def settings_channel_menu(call: types.CallbackQuery, repo: Repository):
    settings = await repo.get_multiple_settings(['news_channel_link', 'force_subscribe'])
    channel_link = settings.get('news_channel_link')
    channel_display = channel_link or "–ù–µ –∑–∞–¥–∞–Ω"
    is_forced = settings.get('force_subscribe') == '1'
    force_status_text = "–í–∫–ª—é—á–µ–Ω–∞" if is_forced else "–í—ã–∫–ª—é—á–µ–Ω–∞"
    
    text = (
        f"<b>üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {channel_display}\n"
        f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: <b>{force_status_text}</b>"
    )
    
    await call.message.edit_text(text, reply_markup=get_settings_channel_kb(is_forced, bool(channel_link)))

@router.callback_query(F.data == "settings_set_channel")
async def settings_set_channel_start(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(AdminSettingsStates.waiting_for_channel_forward)
    await call.message.edit_text(
        "–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞, –∞ –∑–∞—Ç–µ–º –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å—é–¥–∞ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –Ω–µ–≥–æ.",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="settings_channel_menu")]])
    )

@router.callback_query(F.data == "settings_unset_channel")
async def settings_unset_channel(call: types.CallbackQuery, repo: Repository):
    await repo.update_setting('news_channel_id', '')
    await repo.update_setting('news_channel_link', '')
    await call.answer("‚úÖ –ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω.", show_alert=True)
    await settings_channel_menu(call, repo)

@router.message(AdminSettingsStates.waiting_for_channel_forward, F.forward_from_chat)
async def settings_process_channel_forward(message: types.Message, state: FSMContext, repo: Repository, bot: Bot):
    if message.forward_from_chat.type != 'channel':
        await message.answer("‚ùóÔ∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–Ω–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
        return
        
    try:
        invite_link = await bot.create_chat_invite_link(message.forward_from_chat.id)
        await repo.update_setting('news_channel_id', message.forward_from_chat.id)
        await repo.update_setting('news_channel_link', invite_link.invite_link)
        await state.clear()
        
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª '{message.forward_from_chat.title}' —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω.")
        
        settings = await repo.get_multiple_settings(['news_channel_link', 'force_subscribe'])
        channel_link = settings.get('news_channel_link')
        channel_display = channel_link or "–ù–µ –∑–∞–¥–∞–Ω"
        is_forced = settings.get('force_subscribe') == '1'
        force_status_text = "–í–∫–ª—é—á–µ–Ω–∞" if is_forced else "–í—ã–∫–ª—é—á–µ–Ω–∞"
        
        text = (
            f"<b>üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–Ω—ã–º –∫–∞–Ω–∞–ª–æ–º</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π –∫–∞–Ω–∞–ª: {channel_display}\n"
            f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: <b>{force_status_text}</b>"
        )
        await message.answer(text, reply_markup=get_settings_channel_kb(is_forced, bool(channel_link)))

    except Exception as e:
        logging.error(f"Failed to set channel: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–≤—è–∑–∞—Ç—å –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º '–ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'.")

@router.callback_query(F.data == "settings_toggle_subscribe")
async def settings_toggle_subscribe(call: types.CallbackQuery, repo: Repository):
    is_forced = await repo.get_setting('force_subscribe') == '1'
    new_status = not is_forced
    await repo.update_setting('force_subscribe', '1' if new_status else '0')
    
    await call.answer(f"–û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ {'–í–ö–õ–Æ–ß–ï–ù–ê' if new_status else '–í–´–ö–õ–Æ–ß–ï–ù–ê'}", show_alert=True)
    await settings_channel_menu(call, repo)