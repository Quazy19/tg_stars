import logging
from datetime import datetime
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from services.repository import Repository
from services.ton_api import get_ton_balance
from services.profit_calculator import ProfitCalculator
from keyboards.admin_kb import get_admin_panel_kb, get_fee_settings_keyboard, get_back_to_admin_keyboard
from utils.safe_message import safe_answer, safe_answer_document, safe_delete_message
from config import Config

router = Router()

class AdminFeeStates(StatesGroup):
    waiting_for_fee = State()

@router.callback_query(F.data == "admin_panel")
async def admin_panel_callback(call: types.CallbackQuery, state: FSMContext, repo: Repository, config: Config):
    await state.clear()
    is_maintenance = await repo.get_setting('maintenance_mode') == '1'
    
    balance, error = await get_ton_balance(config.ton.ton_wallet_address)
    balance_text = f"üíé –ë–∞–ª–∞–Ω—Å TON: `{balance:.4f} TON`" if not error else f"üíé –ë–∞–ª–∞–Ω—Å TON: `–û—à–∏–±–∫–∞: {error}`"

    await safe_delete_message(call)
    await safe_answer(call, text=f"<b>‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n{balance_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_panel_kb(is_maintenance))

@router.callback_query(F.data == "admin_stats")
async def show_statistics(call: types.CallbackQuery, repo: Repository):
    stats = await repo.get_bot_statistics()
    profit_stats = await repo.get_profit_statistics()
    
    stats_text = (
        f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"‚Ä∫ –í—Å–µ–≥–æ: <code>{stats['total_users']}</code>\n"
        f"‚Ä∫ –ó–∞ –º–µ—Å—è—Ü: <code>{stats['month_users']}</code>\n\n"
        f"<b>–ö—É–ø–ª–µ–Ω–æ –∑–≤—ë–∑–¥ ‚≠ê:</b>\n"
        f"‚Ä∫ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{stats['day_stars']:,}</code>\n"
        f"‚Ä∫ –ó–∞ –º–µ—Å—è—Ü: <code>{stats['month_stars']:,}</code>\n"
        f"‚Ä∫ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è: <code>{stats['total_stars']:,}</code>\n\n"
        f"<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã:</b>\n"
        f"‚Ä∫ –í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è: <code>{profit_stats['day_revenue']:.2f}‚ÇΩ</code>\n"
        f"‚Ä∫ –ü—Ä–∏–±—ã–ª—å —Å–µ–≥–æ–¥–Ω—è: <code>{profit_stats['day_profit']:.2f}‚ÇΩ</code>\n"
        f"‚Ä∫ –í—ã—Ä—É—á–∫–∞ –∑–∞ –º–µ—Å—è—Ü: <code>{profit_stats['month_revenue']:.2f}‚ÇΩ</code>\n"
        f"‚Ä∫ –ü—Ä–∏–±—ã–ª—å –∑–∞ –º–µ—Å—è—Ü: <code>{profit_stats['month_profit']:.2f}‚ÇΩ</code>\n"
        f"‚Ä∫ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: <code>{profit_stats['total_revenue']:.2f}‚ÇΩ</code>\n"
        f"‚Ä∫ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <code>{profit_stats['total_profit']:.2f}‚ÇΩ</code>"
    )
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_detailed_stats")],
        [types.InlineKeyboardButton(text="üíæ –í—ã–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", callback_data="admin_export_db")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]
    ])
    await call.message.edit_text(stats_text, reply_markup=kb)

@router.callback_query(F.data == "admin_detailed_stats")
async def show_detailed_statistics(call: types.CallbackQuery, repo: Repository):
    profit_stats = await repo.get_profit_statistics()
    stats = await repo.get_bot_statistics()
    profit_calc = ProfitCalculator()
    
    day_margin = profit_calc.get_profit_margin(profit_stats['day_revenue'] - profit_stats['day_profit'], profit_stats['day_revenue'])
    month_margin = profit_calc.get_profit_margin(profit_stats['month_revenue'] - profit_stats['month_profit'], profit_stats['month_revenue'])
    total_margin = profit_calc.get_profit_margin(profit_stats['total_revenue'] - profit_stats['total_profit'], profit_stats['total_revenue'])
    ton_rate = await profit_calc.get_ton_rub_rate()

    detailed_text = (
        f"<b>üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>üíπ –ú–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–æ—Ç –≤—ã—Ä—É—á–∫–∏):</b>\n"
        f"‚Ä∫ –°–µ–≥–æ–¥–Ω—è: <code>{day_margin:.1f}%</code>\n"
        f"‚Ä∫ –ó–∞ –º–µ—Å—è—Ü: <code>{month_margin:.1f}%</code>\n"
        f"‚Ä∫ –û–±—â–∞—è: <code>{total_margin:.1f}%</code>\n\n"
        f"<b>üí± –ö—É—Ä—Å—ã:</b>\n"
        f"‚Ä∫ TON/RUB: <code>{ton_rate:.2f}‚ÇΩ</code>\n\n"
        f"<b>üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</b>\n"
        f"‚Ä∫ –ü—Ä–∏–±—ã–ª—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{profit_stats['total_profit'] / max(1, stats.get('total_users', 1)):.2f}‚ÇΩ</code>"
    )
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]])
    await call.message.edit_text(detailed_text, reply_markup=kb)

@router.callback_query(F.data == "admin_export_db")
async def export_database(call: types.CallbackQuery, config: Config):
    document = types.FSInputFile(config.database_path)
    await call.message.answer_document(document, caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M')}")
    await call.answer("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≥—Ä—É–∂–µ–Ω–∞", show_alert=False)

@router.callback_query(F.data == "admin_payment_stats")
async def show_payment_stats(call: types.CallbackQuery, repo: Repository):
    stats = await repo.get_payments_stats()
    methods_text = ""
    method_names = {"lolz": "üî• Lolz", "cryptobot": "ü§ñ CryptoBot", "xrocet": "üöÄ xRocet", "crystalpay": "üíé CrystalPay"}
    
    for method, data in stats['methods'].items():
        name = method_names.get(method, method)
        methods_text += (f"<b>{name}:</b>\n"
                         f"  - –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {data['paid_payments']} –Ω–∞ {data['paid_revenue']:.2f} ‚ÇΩ\n"
                         f"  - –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {data['total_payments']} –Ω–∞ {data['total_revenue']:.2f} ‚ÇΩ\n")
    stats_text = (f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b>\n\n"
                  f"<b>–í—Å–µ–≥–æ —É—Å–ø–µ—à–Ω–æ:</b> {stats['paid_payments']} –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ <b>{stats['paid_revenue']:.2f} ‚ÇΩ</b>\n"
                  f"<b>–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ:</b> {stats['total_payments']} —Å—á–µ—Ç–æ–≤ –Ω–∞ <b>{stats['total_revenue']:.2f} ‚ÇΩ</b>\n\n"
                  f"<b>–ü–æ —Å–∏—Å—Ç–µ–º–∞–º:</b>\n{methods_text if methods_text else '–ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ –±—ã–ª–æ.'}")
    await call.message.edit_text(stats_text, reply_markup=get_back_to_admin_keyboard())

@router.callback_query(F.data == "admin_fees")
async def show_fee_settings(call: types.CallbackQuery, repo: Repository):
    fees = await repo.get_multiple_settings(['lolz_fee', 'cryptobot_fee', 'xrocet_fee', 'crystalpay_fee'])
    text = (f"üí∏ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–π</b>\n\n"
            f"üî• Lolz: <code>{fees.get('lolz_fee', 'N/A')}%</code>\n"
            f"ü§ñ CryptoBot: <code>{fees.get('cryptobot_fee', 'N/A')}%</code>\n"
            f"üöÄ xRocet: <code>{fees.get('xrocet_fee', 'N/A')}%</code>\n"
            f"üíé CrystalPay: <code>{fees.get('crystalpay_fee', 'N/A')}%</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    await call.message.edit_text(text, reply_markup=get_fee_settings_keyboard())

@router.callback_query(F.data.startswith("set_fee_"))
async def set_fee_start(call: types.CallbackQuery, state: FSMContext):
    payment_method = call.data.split("_")[2]
    await state.set_state(AdminFeeStates.waiting_for_fee)
    await state.update_data(payment_method=payment_method)
    
    method_names = {"lolz": "Lolz", "cryptobot": "CryptoBot", "xrocet": "xRocet", "crystalpay": "CrystalPay"}
    await call.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é –¥–ª—è <b>{method_names.get(payment_method)}</b> –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 7.5):",
                                  reply_markup=get_back_to_admin_keyboard())

@router.message(AdminFeeStates.waiting_for_fee)
async def process_new_fee(message: types.Message, state: FSMContext, repo: Repository):
    try:
        fee = float(message.text.replace(",", "."))
        if not (0 <= fee <= 100): raise ValueError
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
        return

    data = await state.get_data()
    payment_method = data["payment_method"]
    await repo.update_setting(f"{payment_method}_fee", fee)
    
    await message.answer(f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è –¥–ª—è <b>{payment_method.capitalize()}</b> —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ <b>{fee}%</b>.")
    await state.clear()
    
    fees = await repo.get_multiple_settings(['lolz_fee', 'cryptobot_fee', 'xrocet_fee', 'crystalpay_fee'])
    text = (f"üí∏ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∏—Å—Å–∏–π</b>\n\n"
            f"üî• Lolz: <code>{fees.get('lolz_fee', 'N/A')}%</code>\n"
            f"ü§ñ CryptoBot: <code>{fees.get('cryptobot_fee', 'N/A')}%</code>\n"
            f"üöÄ xRocet: <code>{fees.get('xrocet_fee', 'N/A')}%</code>\n"
            f"üíé CrystalPay: <code>{fees.get('crystalpay_fee', 'N/A')}%</code>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
    await message.answer(text, reply_markup=get_fee_settings_keyboard())