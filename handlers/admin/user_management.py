from aiogram import F, Router, types, Bot
from aiogram.fsm.context import FSMContext
from datetime import datetime
import logging

from services.repository import Repository
from states.admin import AdminUserManagementStates
from keyboards.admin_kb import get_user_info_kb, get_user_payments_kb, UserPaymentsCallback, AdminUserNavCallback

router = Router()
PAGE_SIZE = 5

async def show_user_info_menu(message: types.Message, state: FSMContext, repo: Repository):
    data = await state.get_data()
    user_id = data['target_user_id']
    
    user = await repo.get_user(user_id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    total_top_up = await repo.get_total_top_up(user_id)
    total_stars_bought = await repo.get_total_stars_bought(user_id)
    reg_date = datetime.fromisoformat(user['created_at']).strftime('%d.%m.%Y')
    status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if not user['is_blocked'] else "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    
    text = (
        f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"<b>üÜî ID:</b> <code>{user['telegram_id']}</code>\n"
        f"<b>üîó Username:</b> @{user['username'] or '-'}\n\n"
        f"<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> {user['balance']:.2f} ‚ÇΩ\n"
        f"<b>üìà –í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–∏–ª:</b> {total_top_up:.2f} ‚ÇΩ\n"
        f"<b>‚≠êÔ∏è –ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥:</b> {total_stars_bought:,}\n\n"
        f"<b>üö¶ –°—Ç–∞—Ç—É—Å:</b> {status}\n"
        f"<b>üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {reg_date}"
    )
    
    await message.edit_text(text, reply_markup=get_user_info_kb(user['is_blocked']))
    await state.set_state(AdminUserManagementStates.user_menu)

@router.callback_query(F.data == "admin_users")
async def admin_users_start(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text(
        text="<b>üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n–í–≤–µ–¥–∏—Ç–µ username (—Å @) –∏–ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    )
    await state.set_state(AdminUserManagementStates.waiting_for_user)

@router.message(AdminUserManagementStates.waiting_for_user)
async def admin_get_user(message: types.Message, state: FSMContext, repo: Repository):
    user_input = message.text.strip().lstrip('@')
    user = await repo.get_user_by_id_or_username(user_input)

    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]))
        return
    
    await state.update_data(target_user_id=user['telegram_id'])
    
    dummy_message = await message.answer("...")
    await show_user_info_menu(dummy_message, state, repo)
    await message.delete()

@router.callback_query(AdminUserManagementStates.user_menu, F.data == 'admin_toggle_block')
async def admin_toggle_block_user(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    data = await state.get_data()
    user_id = data['target_user_id']
    user = await repo.get_user(user_id)
    
    await repo.update_user_block_status(user_id, not user['is_blocked'])
    await call.answer(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω ‚úÖ")
    await show_user_info_menu(call.message, state, repo)

@router.callback_query(AdminUserManagementStates.user_menu, F.data == 'admin_give_balance')
async def admin_give_balance_start(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    target_user_id = data['target_user_id']
    await state.set_state(AdminUserManagementStates.giving_balance_amount)
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminUserNavCallback(action="back_to_menu", target_user_id=target_user_id).pack())]
    ])
    await call.message.edit_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–¥–∞—á–∏:", reply_markup=kb)

@router.callback_query(AdminUserManagementStates.user_menu, F.data == 'admin_take_balance')
async def admin_take_balance_start(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    data = await state.get_data()
    user_id = data['target_user_id']
    user = await repo.get_user(user_id)

    if user['balance'] <= 0:
        await call.answer("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—á–µ–≥–æ —Å–ø–∏—Å—ã–≤–∞—Ç—å.", show_alert=True)
        return

    await state.set_state(AdminUserManagementStates.taking_balance_amount)
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=AdminUserNavCallback(action="back_to_menu", target_user_id=user_id).pack())]
    ])
    await call.message.edit_text("üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=kb)

@router.callback_query(AdminUserNavCallback.filter(F.action == "back_to_menu"))
async def back_to_user_menu(call: types.CallbackQuery, callback_data: AdminUserNavCallback, state: FSMContext, repo: Repository):
    await state.update_data(target_user_id=callback_data.target_user_id)
    await show_user_info_menu(call.message, state, repo)

@router.message(AdminUserManagementStates.giving_balance_amount)
async def admin_give_balance_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.strip())
        if amount <= 0: raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    target_user_id = data['target_user_id']
    await state.update_data(amount_change=amount)
    
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å <b>{amount:.2f} ‚ÇΩ</b>?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_give_balance"), 
             types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=AdminUserNavCallback(action="back_to_menu", target_user_id=target_user_id).pack())]
        ])
    )
    await state.set_state(AdminUserManagementStates.giving_balance_confirm)

@router.message(AdminUserManagementStates.taking_balance_amount)
async def admin_take_balance_amount(message: types.Message, state: FSMContext, repo: Repository):
    try:
        amount = float(message.text.strip())
        if amount <= 0: raise ValueError
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    user_id = data['target_user_id']
    user = await repo.get_user(user_id)

    if amount > user['balance']:
        await message.answer(f"‚ùó –ù–µ–ª—å–∑—è —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']:.2f} ‚ÇΩ")
        return

    await state.update_data(amount_change=amount)
    await message.answer(
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–Ω—è—Ç—å <b>{amount:.2f} ‚ÇΩ</b>?",
        reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_take_balance"), 
             types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=AdminUserNavCallback(action="back_to_menu", target_user_id=user_id).pack())]
        ])
    )
    await state.set_state(AdminUserManagementStates.taking_balance_confirm)

@router.callback_query(AdminUserManagementStates.giving_balance_confirm, F.data == 'confirm_give_balance')
async def admin_give_balance_confirm(call: types.CallbackQuery, state: FSMContext, repo: Repository, bot: Bot):
    data = await state.get_data()
    user_id, amount = data['target_user_id'], data['amount_change']

    await repo.update_user_balance(user_id, amount, 'add')
    
    try:
        await bot.send_message(user_id, f"üí∞ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–ø–æ–ª–Ω–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ <b>{amount:.2f} ‚ÇΩ</b>.")
    except Exception as e:
        logging.error(f"Failed to notify user about balance change: {e}")
    
    await call.answer("‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω.")
    await show_user_info_menu(call.message, state, repo)
    
@router.callback_query(AdminUserManagementStates.taking_balance_confirm, F.data == 'confirm_take_balance')
async def admin_take_balance_confirm(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    data = await state.get_data()
    user_id, amount = data['target_user_id'], data['amount_change']

    await repo.update_user_balance(user_id, amount, 'sub')
    
    await call.answer("‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω.")
    await show_user_info_menu(call.message, state, repo)

@router.callback_query(UserPaymentsCallback.filter())
async def view_user_payments(call: types.CallbackQuery, callback_data: UserPaymentsCallback, state: FSMContext, repo: Repository):
    data = await state.get_data()
    user_id = data.get("target_user_id")
    page = callback_data.page
    
    total_payments = await repo.count_user_payments(user_id)
    text = f"üßæ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>\n\n"

    if total_payments == 0:
        text += "–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π."
        kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data=AdminUserNavCallback(action="back_to_menu", target_user_id=user_id).pack())]])
    else:
        max_page = (total_payments + PAGE_SIZE - 1) // PAGE_SIZE
        payments = await repo.get_user_payments_page(user_id, page, PAGE_SIZE)
        
        status_map = {
            'paid': '‚úÖ –û–ø–ª–∞—á–µ–Ω',
            'pending': '‚è≥ –û–∂–∏–¥–∞–µ—Ç',
            'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω',
            'expired': '‚åõÔ∏è –ò—Å—Ç–µ–∫'
        }

        text_lines = []
        for p in payments:
            status_text = status_map.get(p['status'], p['status'])
            payment_system = p['payment_system'].capitalize() if p['payment_system'] else 'N/A'
            date_formatted = datetime.fromisoformat(p['created_at']).strftime('%d.%m.%Y %H:%M')
            text_lines.append(
                f"‚ñ´Ô∏è <b>{p['amount']:.2f} ‚ÇΩ</b> ({payment_system}) - {status_text}\n"
                f"   <code>{p['uuid']}</code> | {date_formatted}"
            )
        
        text += "\n\n".join(text_lines)
        kb = get_user_payments_kb(page, max_page, user_id)
        
    await call.message.edit_text(text, reply_markup=kb)