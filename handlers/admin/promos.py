import random
import string
import re
from datetime import datetime, timedelta
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from services.repository import Repository
from states.admin import PromoStates
from keyboards.admin_kb import get_promos_menu_kb

router = Router()

async def generate_unique_promo_code(repo: Repository) -> str:
    for _ in range(20):
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        if not await repo.get_promo_by_code(code):
            return code
    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")

@router.callback_query(F.data == "admin_promos")
async def admin_promos_menu(call: types.CallbackQuery):
    await call.message.edit_text(text="<b>üéüÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏</b>", reply_markup=get_promos_menu_kb())

@router.callback_query(F.data == "promo_create")
async def promo_create_choose_type(call: types.CallbackQuery, state: FSMContext):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (‚ÇΩ)", callback_data="promo_type_balance")],
        [types.InlineKeyboardButton(text="üìâ –°–∫–∏–¥–∫–∞ (%)", callback_data="promo_type_discount")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos")],
    ])
    await call.message.edit_text(text="<b>‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:", reply_markup=kb)
    await state.set_state(PromoStates.create_choose_type)

@router.callback_query(PromoStates.create_choose_type, F.data.startswith("promo_type_"))
async def promo_create_choose_name(call: types.CallbackQuery, state: FSMContext):
    promo_type = call.data.replace("promo_type_", "")
    await state.update_data(promo_type=promo_type)
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="promo_gen_name")],
        [types.InlineKeyboardButton(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—ë", callback_data="promo_input_name")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")],
    ])
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è:", reply_markup=kb)
    await state.set_state(PromoStates.create_choose_name)

@router.callback_query(PromoStates.create_choose_name, F.data == "promo_gen_name")
async def promo_create_gen_name(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    code = await generate_unique_promo_code(repo)
    await state.update_data(promo_name=code)
    data = await state.get_data()
    promo_type = data.get("promo_type")
    text = f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è <code>{code}</code>:" if promo_type == "discount" else f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è <code>{code}</code>:"
    await call.message.edit_text(text=text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")]]))
    await state.set_state(PromoStates.create_input_sum)

@router.callback_query(PromoStates.create_choose_name, F.data == "promo_input_name")
async def promo_create_input_name(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ —Ü–∏—Ñ—Ä—ã):", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")]]))
    await state.set_state(PromoStates.create_input_name)

@router.message(PromoStates.create_input_name)
async def promo_create_process_name(message: types.Message, state: FSMContext, repo: Repository):
    code = message.text.strip().upper()
    if not re.match(r'^[A-Z0-9]+$', code):
        await message.answer("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.")
        return
    if await repo.get_promo_by_code(code):
        await message.answer("‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
        return
    
    await state.update_data(promo_name=code)
    data = await state.get_data()
    promo_type = data.get("promo_type")
    text = f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è <code>{code}</code>:" if promo_type == "discount" else f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è <code>{code}</code>:"
    await message.answer(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_create")]]))
    await state.set_state(PromoStates.create_input_sum)

@router.message(PromoStates.create_input_sum)
async def promo_create_input_sum_msg(message: types.Message, state: FSMContext):
    try:
        value = float(message.text.strip())
        if value <= 0: raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    
    await state.update_data(promo_sum=value)
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üî¢ –ö–æ–ª-–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π", callback_data="promo_limit_uses")],
        [types.InlineKeyboardButton(text="‚è∞ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è", callback_data="promo_limit_time")],
        [types.InlineKeyboardButton(text="‚ôæÔ∏è –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π", callback_data="promo_limit_none")],
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:", reply_markup=kb)
    await state.set_state(PromoStates.create_choose_limit)

@router.callback_query(PromoStates.create_choose_limit, F.data == "promo_limit_uses")
async def promo_create_limit_uses(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π:")
    await state.set_state(PromoStates.create_input_uses)

@router.callback_query(PromoStates.create_choose_limit, F.data == "promo_limit_time")
async def promo_create_limit_time(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —á–∞—Å–∞—Ö:")
    await state.set_state(PromoStates.create_input_time)

@router.callback_query(PromoStates.create_choose_limit, F.data == "promo_limit_none")
async def promo_create_no_limit(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    data = await state.get_data()
    code, promo_type, value = data['promo_name'], data['promo_type'], data['promo_sum']
    await repo.create_promo_code(code, promo_type, value)
    await call.message.edit_text(f"‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —Å–æ–∑–¥–∞–Ω!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]]))
    await state.clear()

@router.message(PromoStates.create_input_uses)
async def promo_create_process_uses(message: types.Message, state: FSMContext, repo: Repository):
    try:
        uses = int(message.text)
        if uses <= 0: raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    code, promo_type, value = data['promo_name'], data['promo_type'], data['promo_sum']
    await repo.create_promo_code(code, promo_type, value, max_uses=uses)
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> –Ω–∞ {uses} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —Å–æ–∑–¥–∞–Ω!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]]))
    await state.clear()
    
@router.message(PromoStates.create_input_time)
async def promo_create_process_time(message: types.Message, state: FSMContext, repo: Repository):
    try:
        hours = int(message.text)
        if hours <= 0: raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    code, promo_type, value = data['promo_name'], data['promo_type'], data['promo_sum']
    expires_at = (datetime.now() + timedelta(hours=hours)).isoformat()
    await repo.create_promo_code(code, promo_type, value, expires_at=expires_at)
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> —Å–æ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è {hours} —á–∞—Å(–æ–≤) —Å–æ–∑–¥–∞–Ω!", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="–í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")]]))
    await state.clear()

@router.callback_query(F.data == "promo_active")
async def promo_active_list(call: types.CallbackQuery, repo: Repository):
    promos = await repo.get_active_promo_codes()
    if not promos:
        await call.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–µ—Ç.", show_alert=True)
        return
    
    kb = [[types.InlineKeyboardButton(text=p['code'], callback_data=f"promo_stats_{p['code']}")] for p in promos]
    kb.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos")])
    await call.message.edit_text("<b>üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data == "promo_delete")
async def promo_delete_list(call: types.CallbackQuery, repo: Repository):
    promos = await repo.get_all_promo_codes()
    if not promos:
        await call.answer("–ü—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.", show_alert=True)
        return
        
    kb = [[types.InlineKeyboardButton(text=f"üóëÔ∏è {p['code']}", callback_data=f"promo_confirm_delete_{p['code']}")] for p in promos]
    kb.append([types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_promos")])
    await call.message.edit_text("<b>üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=kb))

@router.callback_query(F.data.startswith("promo_confirm_delete_"))
async def promo_delete_confirm(call: types.CallbackQuery, repo: Repository):
    code_to_delete = call.data.replace("promo_confirm_delete_", "")
    await repo.delete_promo_code(code_to_delete)
    await call.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ {code_to_delete} —É–¥–∞–ª—ë–Ω.", show_alert=True)
    await promo_delete_list(call, repo)

@router.callback_query(F.data.startswith("promo_stats_"))
async def promo_show_stats(call: types.CallbackQuery, repo: Repository):
    code = call.data.replace("promo_stats_", "")
    promo = await repo.get_promo_by_code(code)
    if not promo:
        await call.answer("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    text = f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É:</b> <code>{promo['code']}</code>\n"
    promo_type = "–°–∫–∏–¥–∫–∞" if promo['promo_type'] == 'discount' else "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
    value_unit = "%" if promo['promo_type'] == 'discount' else "‚ÇΩ"
    text += f"–¢–∏–ø: {promo_type} –Ω–∞ {promo['value']} {value_unit}\n"
    text += f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {promo['current_uses']} —Ä–∞–∑\n"
    if promo['max_uses']: text += f"–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {promo['max_uses']}\n"
    if promo['expires_at']: text += f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {datetime.fromisoformat(promo['expires_at']).strftime('%Y-%m-%d %H:%M')}\n"
    
    await call.message.edit_text(text, reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="promo_active")]]))