import re
import logging
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from services.repository import Repository
from services.fragment_sender import FragmentSender
from services.profit_calculator import ProfitCalculator
from keyboards import user_kb
from states.user import BuyStarsGiftStates, BuyStarsSelfStates, BuyStarsConfirmStates
from .start import format_text_with_user_data
from config import Config

router = Router()

async def safe_delete_and_send_photo(call: types.CallbackQuery, config: Config, photo_url: str, text: str, reply_markup: types.InlineKeyboardMarkup = None):
    try:
        await call.message.delete()
        await call.message.answer_photo(photo=photo_url, caption=text, reply_markup=reply_markup)
    except Exception as e:
        logging.error(f"Failed to delete and send photo: {e}")
        await call.message.answer_photo(photo=photo_url, caption=text, reply_markup=reply_markup)

@router.callback_query(F.data == "buy_stars")
async def buy_stars_callback(call: types.CallbackQuery, state: FSMContext, config: Config):
    await state.clear()
    await safe_delete_and_send_photo(
        call, config, config.img_url_stars,
        "<b>–ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã</b>\n\n–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã?",
        user_kb.get_buy_stars_kb()
    )

@router.callback_query(F.data == "buy_stars_self")
async def buy_stars_self_callback(call: types.CallbackQuery, config: Config):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="buy_stars_self_amount"), types.InlineKeyboardButton(text="üì¶ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–∫–∏", callback_data="buy_stars_self_packs")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars")]
    ])
    await call.message.edit_caption(caption="<b>–ü–æ–∫—É–ø–∫–∞ –∑–≤—ë–∑–¥ –¥–ª—è —Å–µ–±—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", reply_markup=kb)

@router.callback_query(F.data == "buy_stars_self_amount")
async def buy_stars_self_amount_callback(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_caption(caption="<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–º–∏–Ω–∏–º—É–º 50):</b>", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_self")]]))
    await state.set_state(BuyStarsSelfStates.waiting_for_self_amount)

@router.message(BuyStarsSelfStates.waiting_for_self_amount)
async def process_self_amount(message: types.Message, state: FSMContext, repo: Repository):
    try:
        amount = int(message.text)
        if amount < 50:
            await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ ‚Äî 50 –∑–≤—ë–∑–¥.")
            return
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    star_price = float(await repo.get_setting('star_price'))
    total = round(amount * star_price, 2)
    user = await repo.get_user(message.from_user.id)
    discount = user["discount"]

    if discount:
        discounted_total = round(total * (1 - float(discount) / 100), 2)
        price_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{amount}</b> –∑–≤—ë–∑–¥\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <s>{total}‚ÇΩ</s> <b>{discounted_total}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)"
        await state.update_data(amount=amount, total=discounted_total)
    else:
        price_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{amount}</b> –∑–≤—ë–∑–¥\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total}‚ÇΩ</b>"
        await state.update_data(amount=amount, total=total)
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_stars_self_confirm")], [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_self")]])
    await message.answer(f"{price_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?", reply_markup=kb)
    await state.set_state(BuyStarsConfirmStates.waiting_for_confirm)

@router.callback_query(F.data == "buy_stars_self_packs")
@router.callback_query(F.data.startswith("buy_stars_self_packs_page_"))
async def buy_stars_self_packs_callback(call: types.CallbackQuery, repo: Repository):
    page = int(call.data.split("_")[-1]) if "page" in call.data else 0
    user = await repo.get_user(call.from_user.id)
    star_price = float(await repo.get_setting('star_price'))
    await call.message.edit_caption(caption="<b>–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥:</b>", reply_markup=user_kb.get_star_packs_kb(page, "buy_stars_self", star_price, user["discount"], back_target="buy_stars_self"))

@router.callback_query(F.data.startswith("buy_stars_self_pack_"))
async def buy_stars_self_pack_selected(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    amount = int(call.data.split("_")[-1])
    star_price = float(await repo.get_setting('star_price'))
    total = round(amount * star_price, 2)
    user = await repo.get_user(call.from_user.id)
    discount = user["discount"]

    if discount:
        discounted_total = round(total * (1 - float(discount) / 100), 2)
        price_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç: <b>{amount}</b> –∑–≤—ë–∑–¥\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total}‚ÇΩ ‚Üí <b>{discounted_total}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)"
        await state.update_data(amount=amount, total=discounted_total)
    else:
        price_text = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞–∫–µ—Ç: <b>{amount}</b> –∑–≤—ë–∑–¥\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total}‚ÇΩ</b>"
        await state.update_data(amount=amount, total=total)
        
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_stars_self_confirm")], [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_self_packs")]])
    await call.message.edit_caption(caption=f"{price_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?", reply_markup=kb)
    await state.set_state(BuyStarsConfirmStates.waiting_for_confirm)

@router.callback_query(BuyStarsConfirmStates.waiting_for_confirm, F.data == "buy_stars_self_confirm")
async def buy_stars_self_confirm_callback(call: types.CallbackQuery, state: FSMContext, repo: Repository, fragment_sender: FragmentSender):
    if not call.from_user.username:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –ª–æ–≥–∏–Ω–∞ –≤ —Ç–≥, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)
        await state.clear()
        return
    
    data = await state.get_data()
    amount, total = data.get("amount"), data.get("total")
    user_obj = call.from_user
    user_db = await repo.get_user(user_obj.id)

    if float(user_db["balance"]) < total:
        error_message = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{total - float(user_db['balance'])}‚ÇΩ</b>"
        error_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup")]])
        try:
            await call.message.edit_caption(caption=error_message, reply_markup=error_kb)
        except TelegramBadRequest:
            await call.message.edit_text(text=error_message, reply_markup=error_kb)
        await state.clear()
        return
        
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
    profit_calc = ProfitCalculator()
    cost_ton, profit_rub = await profit_calc.calculate_stars_profit(amount, total)
    
    success_text_template = await repo.get_setting('purchase_success_text')
    success_text = format_text_with_user_data(success_text_template, user_obj)
    
    await repo.update_user_balance(user_obj.id, total, operation='sub')
    await repo.update_user_discount(user_obj.id, None)
    await repo.add_purchase_to_history(user_obj.id, 'stars', f'{amount} Stars', amount, total, profit_rub)
    
    try:
        await call.message.edit_caption(caption=success_text, reply_markup=None)
    except TelegramBadRequest:
        await call.message.edit_text(text=success_text, reply_markup=None)

    success = await fragment_sender.send_stars(call.from_user.username, amount)
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø—Ä–∏–±—ã–ª–∏
        profit_text = (
            f"üí∞ <b>–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ –∑–≤—ë–∑–¥</b>\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{call.from_user.username}\n"
            f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –∑–≤—ë–∑–¥\n"
            f"üíµ –í—ã—Ä—É—á–∫–∞: {total:.2f}‚ÇΩ\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {profit_rub:.2f}‚ÇΩ\n"
            f"üìä –ú–∞—Ä–∂–∞: {profit_calc.get_profit_margin(total - profit_rub, total):.1f}%"
        )
        await fragment_sender._notify_admins(profit_text)
    else:
        error_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        try:
            await call.message.edit_caption(caption="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤—ë–∑–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=error_kb)
        except:
            await call.message.edit_text(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤—ë–∑–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=error_kb)
    await state.clear()

@router.callback_query(F.data == "buy_stars_gift")
async def buy_stars_gift_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_caption(caption="<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (@username) –ø–æ–ª—É—á–∞—Ç–µ–ª—è.</b>", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars")]]))
    await state.set_state(BuyStarsGiftStates.waiting_for_recipient)

@router.message(BuyStarsGiftStates.waiting_for_recipient)
async def process_gift_recipient(message: types.Message, state: FSMContext):
    match = re.match(r"^@?([a-zA-Z0-9_]{5,32})$", message.text.strip())
    if not match:
        await message.answer("‚ùóÔ∏è<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>@username</code>).")
        return

    recipient = match.group(1)
    await state.update_data(recipient=recipient)
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="buy_stars_gift_amount"), types.InlineKeyboardButton(text="üì¶ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–∫–∏", callback_data="buy_stars_gift_packs")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_gift")]
    ])
    await message.answer(f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>@{recipient}</code>.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", reply_markup=kb)

@router.callback_query(F.data == "buy_stars_gift_amount")
async def buy_stars_gift_amount_callback(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back_to_gift_choice")]])
    await call.message.edit_caption(caption=f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>@{data.get('recipient')}</code>\n\n<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ (–º–∏–Ω–∏–º—É–º 50):</b>", reply_markup=kb)
    await state.set_state(BuyStarsGiftStates.waiting_for_gift_amount)

@router.callback_query(F.data == "buy_stars_gift_packs")
@router.callback_query(F.data.startswith("buy_stars_gift_packs_page_"))
async def buy_stars_gift_packs_callback(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    page = int(call.data.split("_")[-1]) if "page" in call.data else 0
    data = await state.get_data()
    user = await repo.get_user(call.from_user.id)
    star_price = float(await repo.get_setting('star_price'))
    
    text = f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>@{data.get('recipient')}</code>\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:</b>"
    kb = user_kb.get_star_packs_kb(page, "buy_stars_gift", star_price, user["discount"], back_target="back_to_gift_choice")
    await call.message.edit_caption(caption=text, reply_markup=kb)

@router.callback_query(F.data.startswith("buy_stars_gift_pack_"))
async def buy_stars_gift_pack_selected(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    amount = int(call.data.split("_")[-1])
    star_price = float(await repo.get_setting('star_price'))
    total = round(amount * star_price, 2)
    user = await repo.get_user(call.from_user.id)
    data = await state.get_data()
    recipient = data.get("recipient")
    discount = user["discount"]

    if discount:
        discounted_total = round(total * (1 - float(discount) / 100), 2)
        price_text = f"–ü–∞–∫–µ—Ç –¥–ª—è <code>@{recipient}</code>: <b>{amount}</b> –∑–≤—ë–∑–¥\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {total}‚ÇΩ ‚Üí <b>{discounted_total}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)"
        await state.update_data(amount=amount, total=discounted_total)
    else:
        price_text = f"–ü–∞–∫–µ—Ç –¥–ª—è <code>@{recipient}</code>: <b>{amount}</b> –∑–≤—ë–∑–¥\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total}‚ÇΩ</b>"
        await state.update_data(amount=amount, total=total)
        
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_stars_gift_confirm")], [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_gift_packs")]])
    await call.message.edit_caption(caption=f"{price_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?", reply_markup=kb)
    await state.set_state(BuyStarsConfirmStates.waiting_for_gift_confirm)

@router.message(BuyStarsGiftStates.waiting_for_gift_amount)
async def process_gift_amount(message: types.Message, state: FSMContext, repo: Repository):
    try:
        amount = int(message.text)
        if amount < 50:
            await message.answer("‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ ‚Äî 50 –∑–≤—ë–∑–¥.")
            return
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    star_price = float(await repo.get_setting('star_price'))
    total = round(amount * star_price, 2)
    data = await state.get_data()
    recipient = data.get("recipient")
    user = await repo.get_user(message.from_user.id)
    discount = user["discount"]

    if discount:
        discounted_total = round(total * (1 - float(discount) / 100), 2)
        price_text = f"–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è <code>@{recipient}</code>: <b>{amount}</b> –∑–≤—ë–∑–¥\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <s>{total}‚ÇΩ</s> <b>{discounted_total}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)"
        await state.update_data(amount=amount, total=discounted_total)
    else:
        price_text = f"–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è <code>@{recipient}</code>: <b>{amount}</b> –∑–≤—ë–∑–¥\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{total}‚ÇΩ</b>"
        await state.update_data(amount=amount, total=total)
        
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_stars_gift_confirm")], [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_gift_amount")]])
    await message.answer(f"{price_text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?", reply_markup=kb)
    await state.set_state(BuyStarsConfirmStates.waiting_for_gift_confirm)

@router.callback_query(BuyStarsConfirmStates.waiting_for_gift_confirm, F.data == "buy_stars_gift_confirm")
async def buy_stars_gift_confirm_callback(call: types.CallbackQuery, state: FSMContext, repo: Repository, fragment_sender: FragmentSender):
    data = await state.get_data()
    amount, total, recipient = data.get("amount"), data.get("total"), data.get("recipient")
    user_obj = call.from_user
    user_db = await repo.get_user(user_obj.id)

    if float(user_db["balance"]) < total:
        error_message = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{total - float(user_db['balance'])}‚ÇΩ</b>"
        error_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup")]])
        try:
            await call.message.edit_caption(caption=error_message, reply_markup=error_kb)
        except TelegramBadRequest:
            await call.message.edit_text(text=error_message, reply_markup=error_kb)
        await state.clear()
        return
        
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å
    profit_calc = ProfitCalculator()
    cost_ton, profit_rub = await profit_calc.calculate_stars_profit(amount, total)
    
    success_text_template = await repo.get_setting('purchase_success_text')
    success_text = format_text_with_user_data(success_text_template, user_obj)
    
    await repo.update_user_balance(user_obj.id, total, operation='sub')
    await repo.update_user_discount(user_obj.id, None)
    await repo.add_purchase_to_history(user_obj.id, 'stars', f'{amount} Stars for @{recipient}', amount, total, profit_rub)

    final_message = f"{success_text}\n\n–ü–æ–¥–∞—Ä–æ–∫ –¥–ª—è <code>@{recipient}</code> –Ω–∞ <b>{amount} –∑–≤—ë–∑–¥</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
    
    try:
        await call.message.edit_caption(caption=final_message, reply_markup=None)
    except TelegramBadRequest:
        await call.message.edit_text(text=final_message, reply_markup=None)
        
    success = await fragment_sender.send_stars(recipient, amount)
    if success:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø—Ä–∏–±—ã–ª–∏
        profit_text = (
            f"üéÅ <b>–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –∑–≤—ë–∑–¥</b>\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{call.from_user.username}\n"
            f"üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient}\n"
            f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount} –∑–≤—ë–∑–¥\n"
            f"üíµ –í—ã—Ä—É—á–∫–∞: {total:.2f}‚ÇΩ\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {profit_rub:.2f}‚ÇΩ\n"
            f"üìä –ú–∞—Ä–∂–∞: {profit_calc.get_profit_margin(total - profit_rub, total):.1f}%"
        )
        await fragment_sender._notify_admins(profit_text)
    else:
        error_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        try:
            await call.message.edit_caption(caption="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤—ë–∑–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=error_kb)
        except:
            await call.message.edit_text(text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–≤—ë–∑–¥. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=error_kb)
    await state.clear()

@router.callback_query(F.data == "back_to_gift_choice")
async def back_to_gift_choice(call: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    recipient = data.get('recipient')
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üî¢ –í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="buy_stars_gift_amount"), types.InlineKeyboardButton(text="üì¶ –ì–æ—Ç–æ–≤—ã–µ –ø–∞–∫–∏", callback_data="buy_stars_gift_packs")],
        [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_stars_gift")]
    ])
    await call.message.edit_caption(caption=f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>@{recipient}</code>.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:", reply_markup=kb)