from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from services.repository import Repository
from keyboards import user_kb
from states.user import CalculatorStates
from utils.safe_message import safe_answer_photo, safe_delete_message
from config import Config

router = Router()

@router.callback_query(F.data == "calculator")
async def calculator_menu_callback(call: types.CallbackQuery, state: FSMContext, config: Config):
    await state.clear()
    await safe_delete_message(call)
    await safe_answer_photo(
        call,
        photo=config.img_url_calculator,
        caption="<b>üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å:",
        reply_markup=user_kb.get_calculator_kb()
    )

@router.callback_query(F.data == "calc_by_stars")
async def calc_by_stars_start(call: types.CallbackQuery, state: FSMContext):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="calculator")]])
    await call.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ (–º–∏–Ω–∏–º—É–º 50):", reply_markup=kb)
    await state.set_state(CalculatorStates.waiting_for_stars_amount)

@router.message(CalculatorStates.waiting_for_stars_amount)
async def calc_by_stars_process(message: types.Message, state: FSMContext, repo: Repository):
    try:
        stars_amount = int(message.text)
        if stars_amount < 50:
            await message.answer("‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ‚Äî 50 –∑–≤—ë–∑–¥.")
            return
    except ValueError:
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return

    star_price_str = await repo.get_setting('star_price')
    star_price = float(star_price_str) if star_price_str else 1.8
    total_cost = round(stars_amount * star_price, 2)
    
    await message.answer(f"‚≠ê <b>{stars_amount:,}</b> –∑–≤—ë–∑–¥ ‚âà <b>{total_cost:.2f} ‚ÇΩ</b>")
    await state.clear()

@router.callback_query(F.data == "calc_by_rub")
async def calc_by_rub_start(call: types.CallbackQuery, state: FSMContext):
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="calculator")]])
    await call.message.edit_caption(caption="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (‚ÇΩ):", reply_markup=kb)
    await state.set_state(CalculatorStates.waiting_for_rub_amount)

@router.message(CalculatorStates.waiting_for_rub_amount)
async def calc_by_rub_process(message: types.Message, state: FSMContext, repo: Repository):
    try:
        rub_amount = float(message.text.replace(",", "."))
        if rub_amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return

    star_price_str = await repo.get_setting('star_price')
    star_price = float(star_price_str) if star_price_str else 1.8
    if star_price == 0:
        await message.answer("‚ùóÔ∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å, —Ç–∞–∫ –∫–∞–∫ —Ü–µ–Ω–∞ –∑–≤–µ–∑–¥—ã —Ä–∞–≤–Ω–∞ –Ω—É–ª—é.")
        return
        
    stars_count = int(rub_amount / star_price)

    await message.answer(f"‚ÇΩ <b>{rub_amount:.2f}</b> ‚âà <b>{stars_count:,} ‚≠ê</b>")
    await state.clear()