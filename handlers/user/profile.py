import logging
from aiogram import F, Router, Bot, types
from aiogram.fsm.context import FSMContext
from datetime import datetime

from config import Config
from services.repository import Repository
from payments.cryptobot import create_cryptopay_invoice, get_usdt_rub_rate
from payments.lolzteam import create_lzt_payment_link
from payments.crystalpay import create_crystalpay_invoice
from payments.payment_manager import PaymentManager
from keyboards import user_kb
from states.user import TopupCryptoPayStates, TopupLztStates, TopupCrystalPayStates, PromoUserStates
from utils.safe_message import safe_answer_photo, safe_answer, safe_delete_message
from .start import show_main_menu

router = Router()

@router.callback_query(F.data == "profile")
async def profile_callback(call: types.CallbackQuery, repo: Repository, config: Config):
    user = await repo.get_or_create_user(call.from_user.id, call.from_user.username)
    total_stars_bought = await repo.get_total_stars_bought(user['telegram_id'])
    reg_date_obj = datetime.fromisoformat(user['created_at'])
    reg_date_formatted = reg_date_obj.strftime('%d.%m.%Y')

    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        f"üÜî ID: <code>{user['telegram_id']}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user['balance']:.2f} ‚ÇΩ</b>\n"
        f"‚≠êÔ∏è –ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥: <b>{total_stars_bought:,}</b>\n"
        f"üìÜ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞: <b>{reg_date_formatted}</b>"
    )
    
    await safe_delete_message(call)
    await safe_answer_photo(
        call,
        photo=config.img_url_profile,
        caption=text,
        reply_markup=user_kb.get_profile_kb()
    )

@router.callback_query(F.data == "profile_topup_menu")
async def profile_topup_menu_callback(call: types.CallbackQuery, config: Config):
    await safe_delete_message(call)
    await safe_answer_photo(
        call,
        photo=config.img_url_profile,
        caption="<b>üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>",
        reply_markup=user_kb.get_payment_method_kb()
    )

async def pre_topup_checks(call: types.CallbackQuery, repo: Repository, state: FSMContext) -> bool:
    if await repo.get_active_payment(call.from_user.id):
        await call.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π.", show_alert=True)
        return False
    await state.clear()
    await repo.mark_old_payments_as_expired(call.from_user.id)
    return True

@router.callback_query(F.data == "topup_cryptobot")
async def topup_cryptobot_handler(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    if not await pre_topup_checks(call, repo, state):
        return
        
    user = await repo.get_user(call.from_user.id)
    text = (
        f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CryptoBot</b>\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{user['balance']:.2f} ‚ÇΩ</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (RUB):"
    )
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile_topup_menu")]])
    await call.message.edit_caption(caption=text, reply_markup=kb)
    await state.set_state(TopupCryptoPayStates.waiting_for_amount)

@router.message(TopupCryptoPayStates.waiting_for_amount)
async def topup_cryptopay_amount(message: types.Message, state: FSMContext, repo: Repository, config: Config):
    try:
        amount_rub = float(message.text.replace(",", "."))
        if amount_rub < config.min_payment_amount:
            await message.answer(f"‚ùó –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî {config.min_payment_amount} ‚ÇΩ.")
            return
    except ValueError:
        await message.answer("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    exchange_rate = await get_usdt_rub_rate(config)
    try:
        invoice_url, order_id = await create_cryptopay_invoice(config, message.from_user.id, amount_rub, exchange_rate)
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É. –û—à–∏–±–∫–∞: {e}")
        return

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚úÖ –û–ø–ª–∞—Ç–∏—Ç—å", url=invoice_url)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_db_payment_{order_id}")]
    ])
    sent_message = await message.answer(f"–°—á—ë—Ç –Ω–∞ <b>{amount_rub:.2f} ‚ÇΩ</b> —Å–æ–∑–¥–∞–Ω! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ @CryptoBot.", reply_markup=kb)
    
    await repo.create_payment(order_id, message.from_user.id, sent_message.message_id, amount_rub, 'cryptobot', invoice_url=invoice_url)
    await state.clear()

@router.callback_query(F.data.startswith("cancel_db_payment_"))
async def cancel_db_payment_callback(call: types.CallbackQuery, repo: Repository):
    order_id = call.data.replace("cancel_db_payment_", "", 1)
    status_was_updated = await repo.update_payment_status(order_id, 'cancelled')
    
    if status_was_updated:
        await call.answer("–°—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.")
        try:
            await call.message.edit_text("‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=None)
        except Exception:
            pass
    else:
        await call.answer("–≠—Ç–æ—Ç —Å—á–µ—Ç —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.", show_alert=True)
        try:
            await call.message.edit_text("‚ùå –≠—Ç–æ—Ç —Å—á–µ—Ç —É–∂–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.", reply_markup=None)
        except Exception:
            pass

@router.callback_query(F.data == "topup_lzt")
async def topup_lzt_handler(call: types.CallbackQuery, state: FSMContext, config: Config, repo: Repository):
    if not await pre_topup_checks(call, repo, state):
        return
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile_topup_menu")]])
    await call.message.edit_caption(caption=f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ LolzTeam</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º {config.min_payment_amount}‚ÇΩ):", reply_markup=kb)
    await state.set_state(TopupLztStates.waiting_for_amount)

@router.message(TopupLztStates.waiting_for_amount)
async def process_lzt_amount(message: types.Message, state: FSMContext, config: Config, payment_manager: PaymentManager, repo: Repository):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < config.min_payment_amount:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {config.min_payment_amount}‚ÇΩ")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    order_id = payment_manager.generate_order_id()
    payment_link = create_lzt_payment_link(config, amount, order_id)
    
    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_link)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_db_payment_{order_id}")]
    ])
    
    sent_message = await message.answer(f"üí∞ –í–∞—à —Å—á—ë—Ç –Ω–∞ {amount:.2f}‚ÇΩ —á–µ—Ä–µ–∑ LolzTeam.\n\n`ID: {order_id}`\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.", reply_markup=kb)
    await repo.create_payment(order_id, message.from_user.id, sent_message.message_id, amount, 'lzt', invoice_url=payment_link)
    await state.clear()

@router.callback_query(F.data == "topup_crystalpay")
async def topup_crystalpay_handler(call: types.CallbackQuery, state: FSMContext, config: Config, repo: Repository):
    if not await pre_topup_checks(call, repo, state):
        return
        
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="profile_topup_menu")]])
    await call.message.edit_caption(caption=f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ CrystalPay</b>\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–º–∏–Ω–∏–º—É–º {config.min_payment_amount}‚ÇΩ):", reply_markup=kb)
    await state.set_state(TopupCrystalPayStates.waiting_for_amount)
    
@router.message(TopupCrystalPayStates.waiting_for_amount)
async def process_crystalpay_amount(message: types.Message, state: FSMContext, config: Config, payment_manager: PaymentManager, repo: Repository):
    try:
        amount = float(message.text.replace(',', '.'))
        if amount < config.min_payment_amount:
            await message.answer(f"‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: {config.min_payment_amount}‚ÇΩ")
            return
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return

    order_id = payment_manager.generate_order_id()
    payment_url, invoice_id = await create_crystalpay_invoice(config, amount, order_id)

    if not payment_url:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="üîÆ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CrystalPay", url=payment_url)],
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_db_payment_{order_id}")]
    ])
    
    sent_message = await message.answer(f"üíé –í–∞—à —Å—á—ë—Ç –Ω–∞ {amount:.2f}‚ÇΩ —á–µ—Ä–µ–∑ CrystalPay.\n\n`ID: {order_id}`\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.", reply_markup=kb)
    await repo.create_payment(order_id, message.from_user.id, sent_message.message_id, amount, 'crystalpay', invoice_url=payment_url, external_invoice_id=invoice_id)
    await state.clear()

@router.callback_query(F.data == "profile_activate_promo")
async def profile_activate_promo_callback(call: types.CallbackQuery, state: FSMContext):
    await safe_delete_message(call)
    cancel_kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="profile")]
    ])
    await safe_answer(call, "<b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:", reply_markup=cancel_kb)
    await state.set_state(PromoUserStates.waiting_for_code)

@router.message(PromoUserStates.waiting_for_code)
async def promo_user_enter_code(message: types.Message, state: FSMContext, repo: Repository, config: Config):
    code = message.text.strip().upper()
    user_id = message.from_user.id
    promo = await repo.get_promo_by_code(code)
    
    if not promo or (promo['expires_at'] and datetime.fromisoformat(promo['expires_at']) < datetime.now()) or (promo['max_uses'] and promo['current_uses'] >= promo['max_uses']):
        await message.answer("‚ùó –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω.")
        return

    if await repo.check_promo_usage_by_user(user_id, promo['id']):
        await message.answer("‚ùó –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
        return

    await repo.activate_promo_for_user(user_id, promo)
    if promo['promo_type'] == 'discount':
        await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à–∞ —Å–∫–∏–¥–∫–∞: <b>{promo['value']}%</b> –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –ø–æ–∫—É–ø–∫—É.")
    else:
        await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ <code>{code}</code> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>{promo['value']} ‚ÇΩ</b>.")
    
    await state.clear()
    await show_main_menu(message, repo, config, message.from_user)