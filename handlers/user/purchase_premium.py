import re
import logging
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext

from services.repository import Repository
from services.fragment_sender import FragmentSender
from services.profit_calculator import ProfitCalculator
from keyboards import user_kb
from states.user import BuyPremiumStates
from keyboards.user_kb import PREMIUM_PLANS
from .start import format_text_with_user_data
from config import Config
from utils.safe_message import safe_delete_and_send_photo, safe_edit_message

router = Router()

async def get_premium_prices(repo: Repository):
    keys = [f'premium_price_{i}' for i in range(len(PREMIUM_PLANS))]
    prices_db = await repo.get_multiple_settings(keys)
    return [float(prices_db.get(f'premium_price_{i}', plan['price'])) for i, plan in enumerate(PREMIUM_PLANS)]

@router.callback_query(F.data == "buy_premium")
async def buy_premium_callback(call: types.CallbackQuery, state: FSMContext, config: Config):
    await state.clear()
    await safe_delete_and_send_photo(
        call, config, config.img_url_premium,
        "<b>–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º</b>\n\n–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º?",
        user_kb.get_buy_premium_kb()
    )

@router.callback_query(F.data == "buy_premium_self")
async def buy_premium_self_callback(call: types.CallbackQuery, repo: Repository):
    user = await repo.get_user(call.from_user.id)
    premium_prices = await get_premium_prices(repo)
    kb = user_kb.get_premium_plans_kb(premium_prices, user["discount"], prefix="buy_premium_self_plan", back_target="buy_premium")
    await safe_edit_message(call, text="<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è —Å–µ–±—è:</b>", reply_markup=kb)

@router.callback_query(F.data.startswith("buy_premium_self_plan_"))
async def buy_premium_self_plan_selected(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    plan_index = int(call.data.split("_")[-1])
    plan = PREMIUM_PLANS[plan_index]
    premium_prices = await get_premium_prices(repo)
    price = premium_prices[plan_index]
    user = await repo.get_user(call.from_user.id)
    discount = user["discount"]

    if discount:
        discounted_price = round(price * (1 - float(discount) / 100), 2)
        text = f"–¢–∞—Ä–∏—Ñ –¥–ª—è —Å–µ–±—è: <b>{plan['name']}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ ‚Üí <b>{discounted_price}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)"
        await state.update_data(plan_index=plan_index, total=discounted_price)
    else:
        text = f"–¢–∞—Ä–∏—Ñ –¥–ª—è —Å–µ–±—è: <b>{plan['name']}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}‚ÇΩ</b>"
        await state.update_data(plan_index=plan_index, total=price)
        
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_premium_self_confirm")], [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium_self")]])
    await safe_edit_message(call, text=f"{text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?", reply_markup=kb)
    await state.set_state(BuyPremiumStates.waiting_for_self_confirm)

@router.callback_query(BuyPremiumStates.waiting_for_self_confirm, F.data == "buy_premium_self_confirm")
async def buy_premium_self_confirm_callback(call: types.CallbackQuery, state: FSMContext, repo: Repository, fragment_sender: FragmentSender):
    if not call.from_user.username:
        await call.answer("–£ –≤–∞—Å –Ω–µ—Ç—É –ª–æ–≥–∏–Ω–∞ –≤ —Ç–≥, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑", show_alert=True)
        await state.clear()
        return
        
    data = await state.get_data()
    plan_index, total = data.get("plan_index"), data.get("total")
    plan = PREMIUM_PLANS[plan_index]
    user_obj = call.from_user
    user_db = await repo.get_user(user_obj.id)

    if float(user_db["balance"]) < total:
        await safe_edit_message(call, text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{total - float(user_db['balance'])}‚ÇΩ</b>", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup")]]))
        await state.clear()
        return

    success_text_template = await repo.get_setting('purchase_success_text')
    success_text = format_text_with_user_data(success_text_template, user_obj)
    
    months = plan["duration"] // 30
    profit_calc = ProfitCalculator()
    cost_ton, profit_rub = await profit_calc.calculate_premium_profit(months, total)
    
    await repo.update_user_balance(user_obj.id, total, operation='sub')
    
    success = await fragment_sender.send_premium(call.from_user.username, months)
    
    if success:
        await repo.update_user_discount(user_obj.id, None) 
        await repo.add_purchase_to_history(user_obj.id, 'premium', plan['name'], months, total, profit_rub)
        final_message = f"{success_text}\n\n–ü—Ä–µ–º–∏—É–º <b>{plan['name']}</b> —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
        await safe_edit_message(call, text=final_message, reply_markup=None)
        
        profit_text = (
            f"üíé <b>–ù–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–º–∏—É–º–∞</b>\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{call.from_user.username}\n"
            f"üìÖ –¢–∞—Ä–∏—Ñ: {plan['name']}\n"
            f"üíµ –í—ã—Ä—É—á–∫–∞: {total:.2f}‚ÇΩ\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {profit_rub:.2f}‚ÇΩ\n"
            f"üìä –ú–∞—Ä–∂–∞: {profit_calc.get_profit_margin(total - profit_rub, total):.1f}%"
        )
        await fragment_sender._notify_admins(profit_text)
    else:
        await repo.update_user_balance(user_obj.id, total, operation='add')
        error_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        await safe_edit_message(call, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–º–∏—É–º–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=error_kb)
    await state.clear()

@router.callback_query(F.data == "buy_premium_gift")
async def buy_premium_gift_callback(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_edit_message(call, text="<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º (@username) –ø–æ–ª—É—á–∞—Ç–µ–ª—è.</b>", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium")]]))
    await state.set_state(BuyPremiumStates.waiting_for_gift_recipient)

@router.message(BuyPremiumStates.waiting_for_gift_recipient)
async def process_premium_gift_recipient(message: types.Message, state: FSMContext, repo: Repository, config: Config):
    match = re.match(r"^@?([a-zA-Z0-9_]{5,32})$", message.text.strip())
    if not match:
        await message.answer("‚ùóÔ∏è<b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —é–∑–µ—Ä–Ω–µ–π–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>@username</code>).")
        return
    
    recipient = match.group(1)
    await state.update_data(recipient=recipient)
    
    user = await repo.get_user(message.from_user.id)
    premium_prices = await get_premium_prices(repo)
    kb = user_kb.get_premium_plans_kb(premium_prices, user["discount"], prefix="buy_premium_gift_plan", back_target="buy_premium_gift")
    
    await message.delete()
    await message.answer_photo(
        photo=config.img_url_premium,
        caption=f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: <code>@{recipient}</code>\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞:</b>", 
        reply_markup=kb
    )
    await state.set_state(BuyPremiumStates.waiting_for_gift_plan)

@router.callback_query(BuyPremiumStates.waiting_for_gift_plan, F.data.startswith("buy_premium_gift_plan_"))
async def buy_premium_gift_plan_selected(call: types.CallbackQuery, state: FSMContext, repo: Repository):
    plan_index = int(call.data.split("_")[-1])
    plan = PREMIUM_PLANS[plan_index]
    premium_prices = await get_premium_prices(repo)
    price = premium_prices[plan_index]
    user = await repo.get_user(call.from_user.id)
    data = await state.get_data()
    recipient = data.get("recipient")
    discount = user["discount"]

    if discount:
        discounted_price = round(price * (1 - float(discount) / 100), 2)
        text = f"–¢–∞—Ä–∏—Ñ –¥–ª—è <code>@{recipient}</code>: <b>{plan['name']}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}‚ÇΩ ‚Üí <b>{discounted_price}‚ÇΩ</b> (—Å–∫–∏–¥–∫–∞ {discount}%)"
        await state.update_data(plan_index=plan_index, total=discounted_price)
    else:
        text = f"–¢–∞—Ä–∏—Ñ –¥–ª—è <code>@{recipient}</code>: <b>{plan['name']}</b>\n–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price}‚ÇΩ</b>"
        await state.update_data(plan_index=plan_index, total=price)
        
    kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="buy_premium_gift_confirm")], [types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_premium_gift")]])
    await safe_edit_message(call, text=f"{text}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É?", reply_markup=kb)
    await state.set_state(BuyPremiumStates.waiting_for_gift_confirm)

@router.callback_query(BuyPremiumStates.waiting_for_gift_confirm, F.data == "buy_premium_gift_confirm")
async def buy_premium_gift_confirm_callback(call: types.CallbackQuery, state: FSMContext, repo: Repository, fragment_sender: FragmentSender):
    data = await state.get_data()
    plan_index, total, recipient = data.get("plan_index"), data.get("total"), data.get("recipient")
    plan = PREMIUM_PLANS[plan_index]
    user_obj = call.from_user
    user_db = await repo.get_user(user_obj.id)

    if float(user_db["balance"]) < total:
        await safe_edit_message(call, text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: <b>{total - float(user_db['balance'])}‚ÇΩ</b>", reply_markup=types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="profile_topup")]]))
        await state.clear()
        return

    success_text_template = await repo.get_setting('purchase_success_text')
    success_text = format_text_with_user_data(success_text_template, user_obj)

    months = plan["duration"] // 30
    profit_calc = ProfitCalculator()
    cost_ton, profit_rub = await profit_calc.calculate_premium_profit(months, total)
    
    await repo.update_user_balance(user_obj.id, total, operation='sub')
    
    success = await fragment_sender.send_premium(recipient, months)
    
    if success:
        await repo.update_user_discount(user_obj.id, None) 
        await repo.add_purchase_to_history(user_obj.id, 'premium', f"{plan['name']} for @{recipient}", months, total, profit_rub)
        final_message = f"{success_text}\n\n–ü—Ä–µ–º–∏—É–º <b>{plan['name']}</b> –¥–ª—è <code>@{recipient}</code> —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!"
        await safe_edit_message(call, text=final_message, reply_markup=None)

        profit_text = (
            f"üéÅ <b>–ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫ –ø—Ä–µ–º–∏—É–º–∞</b>\n\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{call.from_user.username}\n"
            f"üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient}\n"
            f"üìÖ –¢–∞—Ä–∏—Ñ: {plan['name']}\n"
            f"üíµ –í—ã—Ä—É—á–∫–∞: {total:.2f}‚ÇΩ\n"
            f"üìà –ü—Ä–∏–±—ã–ª—å: {profit_rub:.2f}‚ÇΩ\n"
            f"üìä –ú–∞—Ä–∂–∞: {profit_calc.get_profit_margin(total - profit_rub, total):.1f}%"
        )
        await fragment_sender._notify_admins(profit_text)
    else:
        await repo.update_user_balance(user_obj.id, total, operation='add')
        error_kb = types.InlineKeyboardMarkup(inline_keyboard=[[types.InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
        await safe_edit_message(call, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–º–∏—É–º–∞. –°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=error_kb)
    await state.clear()
